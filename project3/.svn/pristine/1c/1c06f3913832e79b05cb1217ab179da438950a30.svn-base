/* Generated By:JavaCC: Do not edit this line. simplejavaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface simplejavaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ELSE = 6;
  /** RegularExpression Id. */
  int FOR = 7;
  /** RegularExpression Id. */
  int MINUS = 8;
  /** RegularExpression Id. */
  int PLUS = 9;
  /** RegularExpression Id. */
  int TIMES = 10;
  /** RegularExpression Id. */
  int DIVIDE = 11;
  /** RegularExpression Id. */
  int LEFTBRACE = 12;
  /** RegularExpression Id. */
  int RIGHTBRACE = 13;
  /** RegularExpression Id. */
  int LEFTBRACKET = 14;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 15;
  /** RegularExpression Id. */
  int LEFTPARENTHESIS = 16;
  /** RegularExpression Id. */
  int RIGHTPARENTHESIS = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int SEMICOLON = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int ASSIGN = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int EQUALS = 24;
  /** RegularExpression Id. */
  int NOT_EQUAL = 25;
  /** RegularExpression Id. */
  int LESS_THAN = 26;
  /** RegularExpression Id. */
  int GREATER_THAN = 27;
  /** RegularExpression Id. */
  int LESS_EQUAL = 28;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int RETURN = 34;
  /** RegularExpression Id. */
  int CLASS = 35;
  /** RegularExpression Id. */
  int NEW = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 39;
  /** RegularExpression Id. */
  int IDENTIFIER = 40;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"/*\"",
    "<token of kind 5>",
    "\"else\"",
    "\"for\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"do\"",
    "\"while\"",
    "\";\"",
    "\"&&\"",
    "\"=\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"true\"",
    "\"false\"",
    "\"if\"",
    "\"return\"",
    "\"class\"",
    "\"new\"",
    "\".\"",
    "\",\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "\"*/\"",
    "\"/*\"",
    "\"\\n\"",
    "<token of kind 44>",
  };

}
