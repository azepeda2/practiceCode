/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

  static final public ASTProgram program() throws ParseException {
        ASTClasses classes = new ASTClasses();
        ASTFunctionDefinitions func_def = new ASTFunctionDefinitions();
        ASTProgram program = new ASTProgram(classes, func_def, 0);
        ASTClass cls;
        ASTFunctionDefinition function;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cls = singleClass();
                           classes.addElement(cls);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function = functiondef();
                                func_def.addElement(function);
    }
    jj_consume_token(0);
           {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition functiondef() throws ParseException {
        Token type; Token name;
        ASTFormals fmls = new ASTFormals();
        ASTStatement body;
    type = jj_consume_token(IDENTIFIER);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTPARENTHESIS);
    fmls = formals();
    jj_consume_token(RIGHTPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                          {if (true) return new ASTPrototype(type.image, name.image, fmls, type.beginLine);}
      break;
    case LEFTBRACKET:
    case DO:
    case WHILE:
    case IF:
    case IDENTIFIER:
      body = stmt();
                             {if (true) return new ASTFunction(type.image, name.image, fmls, body, type.beginLine);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormals formals() throws ParseException {
        Token type; Token name;
        ASTFormals list = new ASTFormals();
        int arrayDimension = 0;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      type = jj_consume_token(IDENTIFIER);
      name = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
        jj_consume_token(LEFTBRACKET);
        jj_consume_token(RIGHTBRACKET);
                                                                                 arrayDimension++;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                ASTFormal form = new ASTFormal(type.image, name.image, arrayDimension, type.beginLine);
                list.addElement(form);
    }
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTClass singleClass() throws ParseException {
        Token name; ASTInstanceVariableDefs vars;
    jj_consume_token(CLASS);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTBRACE);
    vars = varDefs();
    jj_consume_token(RIGHTBRACE);
                {if (true) return new ASTClass(name.image, vars, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDefs varDefs() throws ParseException {
        ASTInstanceVariableDefs varDefs = new ASTInstanceVariableDefs();
        Token type; Token name;
        int arrayCount = 0;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      type = jj_consume_token(IDENTIFIER);
      name = jj_consume_token(IDENTIFIER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTBRACKET:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(LEFTBRACKET);
        jj_consume_token(RIGHTBRACKET);
      }
                                                                                   arrayCount++;
      jj_consume_token(SEMICOLON);
                ASTInstanceVariableDef var = new ASTInstanceVariableDef(type.image, name.image, arrayCount, type.beginLine);
                varDefs.addElement(var);
    }
              {if (true) return varDefs;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp() throws ParseException {
        ASTExpression e1; ASTExpression e2; Token t;
    e1 = exp1();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(OR);
      e2 = exp1();
                                       e1 = new ASTOperatorExpression(e1, e2, 6, t.beginLine);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp1() throws ParseException {
        ASTExpression e1; ASTExpression e2; Token t;
    e1 = exp2();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(AND);
      e2 = exp2();
                                         e1 = new ASTOperatorExpression(e1, e2, 5, t.beginLine);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp2() throws ParseException {
        ASTExpression e1; ASTExpression e2; Token t;
    e1 = exp3();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(EQUALS);
      e2 = exp3();
                                                 e1 = new ASTOperatorExpression(e1, e2, 7, t.beginLine);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

   // ... WHAT DO WE DO FOR SIMPLE ! <NOT> AND UNARY MINUS
  static final public ASTExpression exp3() throws ParseException {
        ASTExpression e1, e2;
        Token t;
        int op;
    e1 = exp4();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                               op = 1;
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                                                         op = 2;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = exp4();
                                                                                     e1 =  new ASTOperatorExpression(e1, e2, op, t.beginLine);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp4() throws ParseException {
        ASTExpression e1 = null; ASTExpression e2; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPARENTHESIS:
    case TRUE:
    case FALSE:
    case NEW:
    case INTEGER_LITERAL:
      e1 = exp5();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_15;
        }
        t = jj_consume_token(TIMES);
        e2 = exp5();
                                                e1 = new ASTOperatorExpression(e1, e2, 3, t.beginLine);
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_16;
        }
        t = jj_consume_token(DIVIDE);
        e2 = exp3();
                                      e1 = new ASTOperatorExpression(e1, e2, 4, t.beginLine);
      }
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp5() throws ParseException {
        Token t; Token t2;
        ASTExpression e;
        ASTFunctionCallExpression fCall;
        int dimm = 0;
        Token val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPARENTHESIS:
      jj_consume_token(LEFTPARENTHESIS);
      e = exp();
      jj_consume_token(RIGHTPARENTHESIS);
                                                     {if (true) return e;}
      break;
    case NEW:
      jj_consume_token(NEW);
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPARENTHESIS:
        jj_consume_token(LEFTPARENTHESIS);
        jj_consume_token(RIGHTPARENTHESIS);
                                                                            {if (true) return new ASTNewClassExpression(t.image, t.beginLine);}
        break;
      default:
        jj_la1[22] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTBRACKET:
          jj_consume_token(LEFTBRACKET);
          val = jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(RIGHTBRACKET);
                                                                           dimm++;
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFTBRACKET:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_17;
          }
          jj_consume_token(LEFTBRACKET);
          jj_consume_token(RIGHTBRACKET);
                                                                                                                       dimm++;
        }
                        ASTIntegerLiteral var = new ASTIntegerLiteral(Integer.parseInt(val.image), t.beginLine);
                        {if (true) return new ASTNewArrayExpression(t.image, var, dimm, t.beginLine);}
      }
                        ASTBaseVariable v = new ASTBaseVariable(t.image, t.beginLine);
                        {if (true) return new ASTVariableExpression(v, t.beginLine);}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                {if (true) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                             {if (true) return new ASTBooleanLiteral(Boolean.parseBoolean(t.image), t.beginLine);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                              {if (true) return new ASTBooleanLiteral(Boolean.parseBoolean(t.image), t.beginLine);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement stmt() throws ParseException {
        Token t; Token t2; ASTIntegerLiteral i;
        ASTVariableExpression ex; ASTOperatorExpression op;
        ASTStatement s;
        ASTStatements stmts;
        ASTExpression e;
        ASTAssignmentStatement as;
        ASTArrayVariable arr;
        ASTClassVariable cls;
        ASTVariable base;
        ASTFunctionCallStatement fCall;
        int dim = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
                        stmts = new ASTStatements();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTBRACKET:
        case DO:
        case WHILE:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_18;
        }
        s = stmt();
                                                                     stmts.addElement(s);
      }
      jj_consume_token(RIGHTBRACKET);
                                                                                                               {if (true) return stmts;}
      s = forState();
                      {if (true) return s;}
      break;
    case WHILE:
      s = whileState();
                          {if (true) return s;}
      break;
    case DO:
      s = doWhileState();
                            {if (true) return s;}
      break;
    case IF:
      s = ifState();
                       {if (true) return s;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                           base = new ASTBaseVariable(t.image, t.beginLine);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_19;
        }
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);
                                  base = new ASTClassVariable(base, t2.image, t2.beginLine);
      }
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement stmt2() throws ParseException {
        Token t; Token t2; ASTExpression e; ASTBaseVariable v; ASTIntegerLiteral i2;
        ASTVariableExpression ex2; ASTOperatorExpression op2; ASTAssignmentStatement as2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                          {if (true) return new ASTEmptyStatement(t.beginLine);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                             v = new ASTBaseVariable(t.image, t.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t2 = jj_consume_token(INTEGER_LITERAL);
                                                                                                                  e = new ASTIntegerLiteral(Integer.parseInt(t2.image), t2.beginLine);
          break;
        case IDENTIFIER:
          t2 = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                              ASTBaseVariable b = new ASTBaseVariable(t2.image, t2.beginLine); e = new ASTVariableExpression(b, t2.beginLine);
                ASTAssignmentStatement as = new ASTAssignmentStatement(v, e, t.beginLine);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MINUS:
      case PLUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          jj_consume_token(PLUS);
                        i2 = new ASTIntegerLiteral(1, t.beginLine);
                        ex2 = new ASTVariableExpression(v, t.beginLine);
                        op2 = new ASTOperatorExpression(ex2, i2, 2, t.beginLine);
                        as2 = new ASTAssignmentStatement(v, op2, t.beginLine);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          jj_consume_token(MINUS);
                        i2 = new ASTIntegerLiteral(1, t.beginLine);
                        ex2 = new ASTVariableExpression(v, t.beginLine);
                        op2 = new ASTOperatorExpression(ex2, i2, 3, t.beginLine);
                        as2 = new ASTAssignmentStatement(v, op2, t.beginLine);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// need to have a method that creates init and inc stmts, and one for test expressions
//may need to create a new exp list for the test exp()
  static final public ASTForStatement forState() throws ParseException {
        ASTStatement init; ASTExpression test; ASTStatement inc; ASTStatement body; Token t;
    t = jj_consume_token(FOR);
    jj_consume_token(LEFTPARENTHESIS);
    init = stmt2();
    jj_consume_token(SEMICOLON);
    test = exp();
    jj_consume_token(SEMICOLON);
    inc = stmt2();
    jj_consume_token(RIGHTPARENTHESIS);
    body = stmt();
                        {if (true) return new ASTForStatement(init, test, inc, body, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTWhileStatement whileState() throws ParseException {
        ASTExpression e; ASTStatement body; Token t;
    t = jj_consume_token(WHILE);
    jj_consume_token(LEFTPARENTHESIS);
    e = exp();
    jj_consume_token(RIGHTPARENTHESIS);
    body = stmt();
                {if (true) return new ASTWhileStatement(e, body, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTDoWhileStatement doWhileState() throws ParseException {
        ASTStatement body; ASTExpression e; Token t;
    t = jj_consume_token(DO);
    body = stmt();
    jj_consume_token(WHILE);
    jj_consume_token(LEFTPARENTHESIS);
    e = exp();
    jj_consume_token(RIGHTPARENTHESIS);
    jj_consume_token(SEMICOLON);
                {if (true) return new ASTDoWhileStatement(e, body, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIfStatement ifState() throws ParseException {
        ASTStatement then; ASTExpression e; ASTStatement els = null; Token t;
    t = jj_consume_token(IF);
    jj_consume_token(LEFTPARENTHESIS);
    e = exp();
    jj_consume_token(RIGHTPARENTHESIS);
    then = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      els = stmt();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
                {if (true) return new ASTIfStatement(e, then, els, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x1c4000,0x0,0x4000,0x0,0x4000,0x800000,0x200000,0x1000000,0x2000000,0x4000000,0x10000000,0x8000000,0x20000000,0x300,0x300,0x400,0x800,0x80010000,0x4000,0x4000,0x10000,0x80010000,0xc4000,0x0,0x0,0x4000,0x300,0x80010000,0x10000,0xc4000,0x0,0x300,0x400300,0x100000,0x40,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x100,0x102,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x91,0x0,0x0,0x0,0x91,0x102,0x20,0x40,0x0,0x0,0x91,0x0,0x102,0x180,0x0,0x0,0x100,0x0,};
   }

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
